<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on moonsn&#39;s profile</title>
    <link>http://moonsn.com/categories/golang/</link>
    <description>Recent content in golang on moonsn&#39;s profile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 01 Dec 2015 13:43:41 +0800</lastBuildDate><atom:link href="http://moonsn.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>producer consumer problem in Go</title>
      <link>http://moonsn.com/post/producer-consumer/</link>
      <pubDate>Tue, 01 Dec 2015 13:43:41 +0800</pubDate>
      
      <guid>http://moonsn.com/post/producer-consumer/</guid>
      <description>生产者消费者问题(Producer–consumer problem)是一个典型的并发问题，生产者产生数据，同时消费者也在消费数据。
Go的特点就是并发性，所以实现这个问题对go来说很轻松。
package main import &amp;quot;fmt&amp;quot; var done = make(chan bool) var products = make(chan int) func producer() { for i := 0; i &amp;lt; 10; i++ { products &amp;lt;- i fmt.Println(i, &amp;quot; produced!&amp;quot;) } done &amp;lt;- true } func consumer() { for { product := &amp;lt;- products fmt.Println(product, &amp;quot; consumed!&amp;quot;) } } func main() { go producer(); go consumer(); &amp;lt;- done } </description>
    </item>
    
    <item>
      <title>Golang中的方法与接口</title>
      <link>http://moonsn.com/post/golang_3/</link>
      <pubDate>Wed, 21 Oct 2015 19:46:01 +0800</pubDate>
      
      <guid>http://moonsn.com/post/golang_3/</guid>
      <description>方法 Go虽然没有类，但是可以在struct上定义方法。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) type Vertex struct { X, Y float64 } func (v *Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func (v *Vertex) Show(what string) { fmt.Println(&amp;quot;show &amp;quot;, what) } func main() { v := &amp;amp;Vertex{3, 4} fmt.Println(v.Abs()) v.Show(&amp;quot;me&amp;quot;) } 其实，只要在你的包里声明的任何类型都可以定义方法
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) type MyFloat float64 func (f MyFloat) Abs() float64 { if f &amp;lt; 0 { return float64(-f) } return float64(f) } func main() { f := MyFloat(-math.</description>
    </item>
    
    <item>
      <title>Golang中的map和闭包</title>
      <link>http://moonsn.com/post/golang_2/</link>
      <pubDate>Wed, 21 Oct 2015 14:56:57 +0800</pubDate>
      
      <guid>http://moonsn.com/post/golang_2/</guid>
      <description>Range range可以对slice或者map进行迭代循环
package main import &amp;quot;fmt&amp;quot; var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} func main() { for i, v := range pow { fmt.Printf(&amp;quot;2**%d = %d\n&amp;quot;, i, v) } } exercise-slices.go package main import &amp;quot;golang.org/x/tour/pic&amp;quot; func Pic(dx, dy int) [][]uint8 { pic := make([][]uint8, dy); for y := range pic { pic[y] = make([]uint8, dx) for x := range pic[y] { pic[y][x] = uint8((x+y)/2) } } return pic } func main() { pic.</description>
    </item>
    
    <item>
      <title>Golang中的Slice</title>
      <link>http://moonsn.com/post/golangslice/</link>
      <pubDate>Wed, 21 Oct 2015 14:17:10 +0800</pubDate>
      
      <guid>http://moonsn.com/post/golangslice/</guid>
      <description>What? Slice(切片)可以看做是包含三个属性：
 指向数组的指针 切片的长度 切片的容量  使用[]来访问切片，len函数可以返回切片的长度，cap函数可以返回切片的容量。
How To Creat It? s := make([]int, 10) // len(s) = 10, cap(s) = 10 or s := []int{1, 2, 3, 4, 5} //len(s) = 5, cap(s) = 5 or var a [10]int s := a[1:5] //len(s) = 4, cap(s) = 10, same as make([]int, 4, 10) 当数组a改变是，切片也会变。切片的操作也会影响数组
Some else! append函数可以在slice后面加元素。这这时会为slice重新分配空间。如果之前是指向某个数组的，那么，append会使关系失效。
package main import &amp;quot;fmt&amp;quot; func main() { var a = [...]int{1,2,3,4,5} z := a[1:4] fmt.</description>
    </item>
    
    <item>
      <title>Golang的结构，基本类型及语法</title>
      <link>http://moonsn.com/post/aboutgolang/</link>
      <pubDate>Wed, 21 Oct 2015 11:00:08 +0800</pubDate>
      
      <guid>http://moonsn.com/post/aboutgolang/</guid>
      <description>golang需要指定一个工作目录
▾ workspace ▾ src (用于存放go源码) ▾ pkg (放包) ▾ bin (编译出来的东西会放到这里) go源码文件的第一行必须是
package name  当你import一个package的时候，他会解析出目录最后一个元素作为包名，以便在代码中使用。
Testing go有一个轻量级的测试框架。go test 命令和testing 包
你只需要建立一个以_test.go结尾的文件,go test 会运行里面的所有TestXXX函数（这些函数是参数是 (t *testing.T))，如果函数调用了t.Error或t.Fail，就认为测试失败。
我们给stringutil添加一个测试:
$GOPATH/src/github.com/moonsn/stringutil/reverse_test.go package stringutil import &amp;quot;testing&amp;quot; func TestReverse(t *testing.T) { cases := []struct { in, want string }{ {&amp;quot;Hello, world&amp;quot;, &amp;quot;dlrow ,olleH&amp;quot;}, {&amp;quot;Hello, 世界&amp;quot;, &amp;quot;界世 ,olleH&amp;quot;} {&amp;quot;&amp;quot;,&amp;quot;&amp;quot;} } for _, c := range cases { got := Reverse(c.in) if got != c.want { t.</description>
    </item>
    
  </channel>
</rss>
