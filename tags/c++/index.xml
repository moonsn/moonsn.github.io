<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on moonsn&#39;s profile</title>
    <link>https://moonsn.com/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on moonsn&#39;s profile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 18 Apr 2016 13:42:01 +0800</lastBuildDate><atom:link href="https://moonsn.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《STL源码剖析》读书笔记</title>
      <link>https://moonsn.com/books/stlread/</link>
      <pubDate>Mon, 18 Apr 2016 13:42:01 +0800</pubDate>
      
      <guid>https://moonsn.com/books/stlread/</guid>
      <description>迭代器的设计 1. 迭代器iterator模式在《Design Patterns》中是这么定义的： 提供一直方法，使之能够依序巡防某个聚合物所含的各个元素，而又无线暴露该聚合物的 内部表述方式。  2. 获取迭代器所指对象的型别 template &amp;lt;class I, class T&amp;gt; void func_impl(I iter, T t) { T tmp; } template &amp;lt;class I&amp;gt; inline void func(I iter) { func_impl(iter, *iter) } int main() { int i; func(&amp;amp;i); } 这里利用function template的参数推导机制获取迭代器的相应型别。
3. Traits 技巧 由于function template推导的是模板参数，无法推导函数的返回值型别、 所以用 声明内嵌型别的方式
template &amp;lt;class T&amp;gt; struct MyIter { typedef T value_type; T* ptr; MyIter(T* p = 0) : ptr(p) {} T&amp;amp; operator*() const { return *ptr; } } template &amp;lt;class I&amp;gt; tpyename I::value_type func(I ite) { return *ite; } MyIter&amp;lt;int&amp;gt; ite(new int(8)); cout &amp;lt;&amp;lt; func(ite); // print: 8 又由于内嵌型别只能用于class type，对于原生指针又无法支持。所以需要用到 template partial specialization模板偏特化来对原生指针做支持</description>
    </item>
    
    <item>
      <title>运算符重载中的问题</title>
      <link>https://moonsn.com/post/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 08 Nov 2015 15:53:52 +0800</pubDate>
      
      <guid>https://moonsn.com/post/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>我们知道c++的运算符是可以重载的(个别除外)。
class A{}; A&amp;amp; operator,(A&amp;amp;, A&amp;amp;); //重载了逗号运算符 bool operator&amp;amp;&amp;amp;(A&amp;amp;, A&amp;amp;); //重载了&amp;amp;&amp;amp;运算符  A b1, b2; if (b1&amp;amp;&amp;amp;b2) b1, b2; // if(operator&amp;amp;&amp;amp;(b1, b2)) operator,(b1,b2); 可以看到，重载了运算符之后，对运算符的使用被替换为相应的函数调用形式。因此，旧有的运算符的执行顺序不再适用，取而代之的是函数参数的压栈顺序。
短路语义只是一个方面，更重要的在于压栈顺序。鉴于执行效率和旧代码兼容性等细节问题，C++标准在压栈顺序上给编译器的开发者留有很大自主性。标准的说辞是，编译器可能以任何它觉得方便的顺序将参数压栈，从左到右，从右到左，甚至从中间到两边，在这一点上我们不能安全地做任何假设。在上面的例子中，编译器生成的代码可能先计算b1再计算b2，也可能是相反的顺序。
 少用为妙~~~
 </description>
    </item>
    
    <item>
      <title>std::move()将左值转化为右值</title>
      <link>https://moonsn.com/post/welcome/</link>
      <pubDate>Tue, 20 Oct 2015 16:38:57 +0800</pubDate>
      
      <guid>https://moonsn.com/post/welcome/</guid>
      <description>&lt;p&gt;this is summary?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
